<?xml version="1.0" encoding="utf-8"?>
<log4net>
	<!-- 定义一些输出附加器 -->


	<!--name：指定附加器的名称。ype：指定附加器的类型。
	在这个例子中，附加器的类型是 "log4net.Appender.RollingFileAppender"，表示使用 log4net 提供的基于文件滚动的日志附加器。-->
	<appender name="rollingAppender" type="log4net.Appender.RollingFileAppender">
		<file value="log4\log.txt" />
		<!--追加日志内容-->
		<appendToFile value="true" />

		<!--防止多线程时不能写Log,官方说线程非安全-->
		<lockingModel type="log4net.Appender.FileAppender+MinimalLock" />

		<!--可以为:Once|Size|Date|Composite-->
		<!--Composite为Size和Date的组合-->
		<rollingStyle value="Composite" />

		<!--当备份文件时,为文件名加的后缀-->
		<datePattern value="yyyyMMdd.TXT" />

		<!--日志最大个数,都是最新的-->
		<!--rollingStyle节点为Size时,只能有value个日志-->
		<!--rollingStyle节点为Composite时,每天有value个日志-->
		<maxSizeRollBackups value="20" />

		<!--可用的单位:KB|MB|GB-->
		<maximumFileSize value="3MB" />

		<!--置为true,当前最新日志文件名永远为file节中的名字-->
		<staticLogFileName value="true" />

		<!--输出级别在INFO和ERROR之间的日志-->
		<filter type="log4net.Filter.LevelRangeFilter">
			<param name="LevelMin" value="ALL" />
			<param name="LevelMax" value="FATAL" />
		</filter>
		<!--这个配置指定了一个日志过滤器，该过滤器允许所有级别的日志消息通过，但只输出 FATAL 级别及以下的日志消息。
		换句话说，只有 FATAL、ERROR、WARN 和 INFO 级别的日志消息将被输出，而 DEBUG 级别的日志消息将被忽略。
		为什么子记录器设置的最小级别是ALL，而输出的最小级别却是INFO，因为对于子记录器来说，如果根记录器设置了<level value="INFO"/>，
		它会继承根记录器的级别，并且无法通过子记录器的配置来改变。
		无论子记录器的配置是<param name="LevelMin" value="ALL" />还是其他级别，它都会受限于根记录器的级别。
		-->

		<!-- 设置日志的布局 -->
		<layout type="log4net.Layout.PatternLayout">
			<!-- 设置日志的输出格式 -->
			<conversionPattern value="%date [%thread] %-5level %logger - %message%newline"/>
		</layout>
	</appender>

	<!--SqlServer形式-->
	<!--log4net日志配置：http://logging.apache.org/log4net/release/config-examples.html -->
	<appender name="AdoNetAppender_SqlServer" type="log4net.Appender.AdoNetAppender">
		<!--日志缓存写入条数 设置为0时只要有一条就立刻写到数据库-->
		<bufferSize value="0" />
		<!-- 数据库连接类型 -->
		<!--System.Data.SqlClient.SqlConnection 是 .NET Framework 中用于与 SQL Server 数据库建立连接的类。-->
		<!--注意！！！需要安装System.Data.SqlClient包-->
		<!--System.Data.SqlClient 是连接类型所在的命名空间-->
		<!--Version=4.6.1.3 指定了连接类型的版本号-->
		<!--Culture=neutral 指定了连接类型的区域设置为中性-->
		<!--PublicKeyToken=b03f5f7f11d50a3a 是连接类型的公钥令牌。-->
		<connectionType value="System.Data.SqlClient.SqlConnection,System.Data.SqlClient, Version=4.6.1.3, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />

		<connectionString value="Data Source=霜霰;Initial Catalog=holo_Log;Persist Security Info=True;User ID=sa;Password=feizhijie23" />

		<!-- SQL命令，用于将日志插入数据库 -->
		<commandText value="INSERT INTO Log4Net ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
		<!--
			@log_date：表示日志的日期。这个参数用于向表格的 [Date] 列插入日期值。

			@thread：表示日志的线程。这个参数用于向表格的 [Thread] 列插入线程信息。

			@log_level：表示日志的级别。这个参数用于向表格的 [Level] 列插入日志级别。

			@logger：表示日志的记录器（Logger）。这个参数用于向表格的 [Logger] 列插入日志记录器的名称。

			@message：表示日志的消息内容。这个参数用于向表格的 [Message] 列插入日志消息的文本。

			@exception：表示日志的异常信息。这个参数用于向表格的 [Exception] 列插入异常的详细信息。
		-->
		<parameter>
			<parameterName value="@log_date" />
			<dbType value="DateTime" />
			<layout type="log4net.Layout.RawTimeStampLayout" />
		</parameter>
		<parameter>
			<parameterName value="@thread" />
			<dbType value="String" />
			<size value="255" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%thread" />
			</layout>
		</parameter>
		<parameter>
			<parameterName value="@log_level" />
			<dbType value="String" />
			<size value="50" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%level" />
			</layout>
		</parameter>
		<parameter>
			<parameterName value="@logger" />
			<dbType value="String" />
			<size value="255" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%logger" />
			</layout>
		</parameter>
		<parameter>
			<parameterName value="@message" />
			<dbType value="String" />
			<size value="4000" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%message" />
			</layout>
		</parameter>
		<parameter>
			<parameterName value="@exception" />
			<dbType value="String" />
			<size value="2000" />
			<layout type="log4net.Layout.ExceptionLayout" />
		</parameter>
	</appender>
	
	
	<root>
		<!--控制级别，由低到高: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF-->
		<!--OFF:0-->
		<!--FATAL:FATAL-->
		<!--ERROR: ERROR,FATAL-->
		<!--WARN: WARN,ERROR,FATAL-->
		<!--INFO: INFO,WARN,ERROR,FATAL-->
		<!--DEBUG: INFO,WARN,ERROR,FATAL-->
		<!--ALL: DEBUG,INFO,WARN,ERROR,FATAL--> 
		<priority value="ALL"/>
		
		<level value="ALL"/>
		<!--这里设置了根日志记录器的级别。级别定义了根日志记录器本身的日志消息级别，以控制输出到附加器的日志消息级别。
		在这个例子中，设置为 "INFO"，表示只输出 INFO 级别及以上的日志消息。
		由于根日志记录器是顶级记录器，因此设置了级别后，它将 "影响所有子记录器" 的日志消息级别。-->
		
		<appender-ref ref="rollingAppender" />
		<!--这里将名为 "rollingAppender" 的输出附加器添加到根日志记录器中。
		这表示根日志记录器将把日志消息输出到 "rollingAppender" 附加器中。-->

		<appender-ref ref="AdoNetAppender_SqlServer" />
	</root>
</log4net>
